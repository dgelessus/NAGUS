[database]
# Path to the SQLite database file used to store the vault and other server state.
##path = nagus.sqlite

# The journal mode for the SQLite database.
# You normally don't need to change this.
# For a list of supported modes,
# see the SQLite documentation for `PRAGMA journal_mode`:
# https://www.sqlite.org/pragma.html#pragma_journal_mode
##journal_mode = wal

[logging]
# Logging configuration for all parts of the server,
# as a Python dictionary.
# See the Python documentation for logging.config.dictConfig for details.
# Note: If you want to define your own log formatters, handlers, etc.,
# replace "incremental": True with "disable_existing_loggers": False.
# Log levels can also be changed temporarily at runtime using the loglevel console command.
##config =
##	{
##		"version": 1,
##		"incremental": True,
##		"root": {"level": "DEBUG"},
##		"loggers": {
##			"asyncio": {"level": "INFO"},
##			"nagus.auth_server.connect": {"level": "INFO"},
##			"nagus.auth_server.login": {"level": "INFO"},
##			"nagus.auth_server.ping": {"level": "INFO"},
##			"nagus.auth_server.vault.read": {"level": "INFO"},
##			"nagus.auth_server.vault.notify": {"level": "INFO"},
##			"nagus.base": {"level": "INFO"},
##			"nagus.console": {"level": "INFO"},
##			"nagus.game_server.join": {"level": "INFO"},
##			"nagus.game_server.net_message": {"level": "INFO"},
##			"nagus.game_server.ping": {"level": "INFO"},
##			"nagus.game_server.sdl": {"level": "INFO"},
##		},
##	}

# Whether to enable silly quips when logging client and server errors.
##enable_crash_lines = true

[console]
# Whether to enable the interactive server console.
# If disabled,
# use Ctrl+C to shut down the server.
##enable = true

[server]
# Specific address on which to listen for connections,
# or empty to listen on all addresses.
##listen_address = 

# Port on which to listen for connections.
##port = 14617

# Address that the client should connect to,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
##address_for_client = 

[server.status]
# Whether to enable the status HTTP server.
##enable = true

# Specific address on which to listen for status server connections,
# or empty to listen on all addresses.
# Defaults to server.listen_address.
##listen_address =

# Port on which to listen for status server connections.
# Must be different from server.port.
##port = 8080

# Status message text to send to clients.
##message = Welcome to URU

# Whether to add the NAGUS version number and current timestamp as the second line of the status message text.
# This only displays properly if the regular status message doesn't already contain a second line of text.
##add_version_info = true

[server.auth]
# Whether to send a server address message to clients after they connect.
##send_server_address = true

# Address to send to the client in the server address message,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
# Defaults to server.address_for_client.
##address_for_client = 

# How many seconds the state of a disconnected auth connection should be kept by the server.
# During this period,
# the client can reconnect using its token
# to reclaim the connection and keep its server-side state.
# After the timeout,
# the server discards the connection state
# and the client must reconnect from scratch
# (i. e. the player has to restart the client).
# Set to 0 to discard the connection state immediately after disconnect.
# If send_server_address is set to false,
# this option has no effect and defaults to 0,
# because clients are never sent a reconnect token.
##disconnected_client_timeout = 30

[server.game]
# Address to send to the client in the age reply message,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
# Defaults to server.address_for_client.
##address_for_client = 

# How much the server should parse game messages (plMessage).
# The following values are currently supported:
# 
# * known: Try to parse all messages for which NAGUS knows the class and its structure.
#     For messages whose class isn't known,
#     only the general plMessage header is parsed.
#     Errors are logged,
#     but otherwise ignored if possible -
#     even if a message can't be fully parsed or fails some checks,
#     it will be forwarded/echoed normally.
# * necessary: Only parse messages that contain information that NAGUS needs.
#     All other messages are forwarded/echoed without any parsing.
#     Consistency checks are skipped as much as possible.
# 
# Either setting normally works fine.
# `known` can be useful for debugging game server network traffic -
# if DEBUG logging is enabled for "nagus.game_server.pl_message",
# all parsed game server messages are logged in a somewhat readable format.
# `necessary` can be used to work around errors in plMessage parsing
# and might improve performance slightly.
##parse_pl_messages = necessary
