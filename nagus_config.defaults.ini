[database]
# Path to the SQLite database file used to store the vault and other server state.
##path = nagus.sqlite

# The journal mode for the SQLite database.
# You normally don't need to change this.
# For a list of supported modes,
# see the SQLite documentation for `PRAGMA journal_mode`:
# https://www.sqlite.org/pragma.html#pragma_journal_mode
##journal_mode = wal

[logging]
# Logging configuration for all parts of the server,
# as a Python dictionary.
# See the Python documentation for logging.config.dictConfig for details.
# Note: If you want to define your own log formatters, handlers, etc.,
# replace "incremental": True with "disable_existing_loggers": False.
# Log levels can also be changed temporarily at runtime using the loglevel console command.
##config =
##	{
##		"version": 1,
##		"incremental": True,
##		"root": {"level": "DEBUG"},
##		"loggers": {
##			"asyncio": {"level": "INFO"},
##			"nagus.auth_server.connect": {"level": "INFO"},
##			"nagus.auth_server.login": {"level": "INFO"},
##			"nagus.auth_server.ping": {"level": "INFO"},
##			"nagus.auth_server.vault.read": {"level": "INFO"},
##			"nagus.auth_server.vault.notify": {"level": "INFO"},
##			"nagus.base": {"level": "INFO"},
##			"nagus.console": {"level": "INFO"},
##			"nagus.game_server.join": {"level": "INFO"},
##			"nagus.game_server.net_message": {"level": "INFO"},
##			"nagus.game_server.paging": {"level": "INFO"},
##			"nagus.game_server.ping": {"level": "INFO"},
##			"nagus.game_server.pl_message": {"level": "INFO"},
##			"nagus.game_server.sdl": {"level": "INFO"},
##			"nagus.game_server.test_and_set": {"level": "INFO"},
##			"nagus.game_server.voice": {"level": "INFO"},
##			"nagus.gatekeeper_server": {"level": "INFO"},
##		},
##	}

# Whether to enable silly quips when logging client and server errors.
##enable_crash_lines = true

[console]
# Whether to enable the interactive server console.
# If disabled,
# use Ctrl+C to shut down the server.
##enable = true

[ages]
# Path to the configuration file that defines the static global age instances that should be created by the server.
# You normally don't need to change this -
# NAGUS includes a default static_ages.ini that defines all static age instances needed for a regular MOULa shard.
# The format for this configuration file matches DIRTSAND's static_ages.ini
# and the NAGUS default static_ages.ini is kept in sync with the DIRTSAND version.
# 
# Can be set to empty to disable reading this configuration file,
# in which case no static age instances will be set up -
# but be aware that this makes some MOULa ages inaccessible by normal gameplay means
# and may break other aspects of the game in unpredictable ways.
##static_ages_config_file = static_ages.ini

# Determines the public Ae'gura/city instance to which all avatars internally receive a link.
# You normally don't need to change this.
# Be careful when changing this setting if any avatars have already been created,
# because the changed setting will only affect new avatars created from that point on!
# The following values are currently supported:
# 
# * <an instance UUID>: Use the specified Ae'gura/city instance.
# * static: Use the Ae'gura/city instance defined in the static_ages_config file.
#     Only allowed if that configuration file defines exactly one static instance of the city age.
# * none: New avatars don't receive any Ae'gura/city link.
#     Be aware that this puts the avatars in a game state that's not normally possible in MOULa,
#     so the game may break in unpredictable ways for the affected avatars.
##public_aegura_instance = static

# Determines the neighborhood to which newly created avatars are assigned.
# You normally don't need to change this.
# The following values are currently supported:
# 
# * <an instance UUID>: All new avatars become members of the specified neighborhood instance.
# * static: All new avatars become members of the neighborhood instance defined in the static_ages_config file.
#     Only allowed if that configuration file defines exactly one static instance of the Neighborhood age.
# * none: New avatars don't become members of any neighborhood by default.
#     Be aware that this puts the avatars in a game state that's not normally possible in MOULa,
#     so the game may break in unpredictable ways
#     until the avatars in question join or create a neighborhood.
##default_neighborhood_instance = static

[server]
# Specific address on which to listen for connections,
# or empty to listen on all addresses.
##listen_address = 

# Port on which to listen for connections.
##port = 14617

# Whether to enable encryption for the connection types that support it.
# The following values are supported:
# 
# * force: Only allow encrypted connections.
#     If a client requests no encryption,
#     NAGUS will disconnect it.
# * default: Encrypt all connections unless the client specifically requests no encryption.
#     This allows H'uru clients to connect either with or without encryption.
#     This is the default setting if the server has encryption keys configured.
# * none: Never encrypt any connections,
#     regardless of what the client requests.
#     If a client requests encryption,
#     NAGUS will reply with a junk seed and proceed as if the client requested no encryption.
#     This setting is necessary for OpenUru clients built with NO_ENCRYPTION enabled.
#     This is the default setting if the server has no encryption keys configured.
##encryption = 

# Address that the client should connect to,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
##address_for_client = 

[server.status]
# Whether to enable the status HTTP server.
##enable = true

# Specific address on which to listen for status server connections,
# or empty to listen on all addresses.
# Defaults to server.listen_address.
##listen_address =

# Port on which to listen for status server connections.
# Must be different from server.port.
##port = 8080

# Status message text to send to clients.
##message = Welcome to URU

# Whether to add the NAGUS version number and current timestamp as the second line of the status message text.
# This only displays properly if the regular status message doesn't already contain a second line of text.
##add_version_info = true

[server.gatekeeper]
# The g value (base/generator) to use for encryption of gatekeeper server connections.
# You shouldn't need to change this.
##key_g = 4

# The n and a values (public modulus and private key, respectively) to use for encryption of gatekeeper server connections.
# Both values are packed 512-bit big-endian integers in base-64 format
# (this is the same format as used by H'uru and DIRTSAND).
# The n value is public and also configured in the client.
# The a value MUST be kept secret.
##key_n = 
##key_a = 

# The file server address to send to clients.
# Must be 23 characters or shorter due to client limitations.
# If left empty,
# the gatekeeper server will refuse to send a file server address,
# because NAGUS currently doesn't implement the file server.
##file_server_address =

# The auth server address to send to clients.
# Must be 23 characters or shorter due to client limitations.
# Defaults to server.auth.address_for_client.
##auth_server_address =

[server.auth]
# The g value (base/generator) to use for encryption of auth server connections.
# You shouldn't need to change this.
##key_g = 41

# The n and a values (public modulus and private key, respectively) to use for encryption of auth server connections.
# Both values are packed 512-bit big-endian integers in base-64 format
# (this is the same format as used by H'uru and DIRTSAND).
# The n value is public and also configured in the client.
# The a value MUST be kept secret.
##key_n = 
##key_a = 

# Whether and how to send the H'uru-specific ServerCaps message to clients.
# The following values are currently supported:
# 
# * always: Send a ServerCaps message to every client.
#     This is the safest setting if only H'uru clients need to be supported.
#     This setting is incompatible with OpenUru clients,
#     which are unable to parse the ServerCaps message
#     and fail to connect if they receive it.
# * compatible: Send a ServerCaps message to every client,
#     but construct it in a specific way so that OpenUru clients ignore it
#     (even though they can't really parse the message).
#     This setting improves the behavior of H'uru clients
#     without negatively affecting OpenUru clients.
#     There is a small risk though that the odd message structure could confuse or break future client versions.
# * never: Don't send a ServerCaps message at all.
#     This is the most compatible setting overall,
#     because it doesn't send extra data that could be mis-parsed.
#     The disadvantage is that it currently breaks some gameplay aspects for H'uru clients -
#     specifically ones where the game manager is used
#     unless a ServerCaps message says that the server doesn't support the game manager
#     (as is the case for NAGUS).
#     Be aware that those gameplay aspects are currently always broken for OpenUru clients,
#     regardless of whether a ServerCaps message is sent.
##send_server_caps = compatible

# Whether to send a server address message to clients after they connect.
##send_server_address = true

# Address to send to the client in the server address message,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
# Defaults to server.address_for_client.
##address_for_client = 

# How many seconds the state of a disconnected auth connection should be kept by the server.
# During this period,
# the client can reconnect using its token
# to reclaim the connection and keep its server-side state.
# After the timeout,
# the server discards the connection state
# and the client must reconnect from scratch
# (i. e. the player has to restart the client).
# Set to 0 to discard the connection state immediately after disconnect.
# If send_server_address is set to false,
# this option has no effect and defaults to 0,
# because clients are never sent a reconnect token.
##disconnected_client_timeout = 30

[server.game]
# The g value (base/generator) to use for encryption of game server connections.
# You shouldn't need to change this.
##key_g = 73

# The n and a values (public modulus and private key, respectively) to use for encryption of game server connections.
# Both values are packed 512-bit big-endian integers in base-64 format
# (this is the same format as used by H'uru and DIRTSAND).
# The n value is public and also configured in the client.
# The a value MUST be kept secret.
##key_n = 
##key_a = 

# Address to send to the client in the age reply message,
# or empty to try to determine the address automatically from the connection.
# Must be an IPv4 address due to protocol limitations.
# Defaults to server.address_for_client.
##address_for_client = 

# How much the server should parse game messages (plMessage).
# The following values are currently supported:
# 
# * known: Try to parse all messages for which NAGUS knows the class and its structure.
#     For messages whose class isn't known,
#     only the general plMessage header is parsed.
#     Errors are logged,
#     but otherwise ignored if possible -
#     even if a message can't be fully parsed or fails some checks,
#     it will be forwarded/echoed normally.
# * necessary: Only parse messages that contain information that NAGUS needs.
#     All other messages are forwarded/echoed without any parsing.
#     Consistency checks are skipped as much as possible.
# 
# Either setting normally works fine.
# `known` can be useful for debugging game server network traffic -
# if DEBUG logging is enabled for "nagus.game_server.pl_message",
# all parsed game server messages are logged in a somewhat readable format.
# `necessary` can be used to work around errors in plMessage parsing
# and might improve performance slightly.
##parse_pl_messages = necessary
