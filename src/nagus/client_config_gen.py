# This file is part of NAGUS, an Uru Live server that is not very good.
# Copyright (C) 2024 dgelessus
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


"""Generates configuration settings for for clients to connect to this server."""


import base64
import typing

from . import configuration
from . import structs


def _get_external_server_addresses(config: configuration.Configuration) -> typing.Tuple[typing.Optional[str], typing.Optional[int], str, typing.Optional[int], str]:
	if config.server_status_enable:
		if config.server_address_for_client is not None:
			status_server_address = str(config.server_address_for_client)
		elif config.server_status_listen_address not in {"", "0.0.0.0"}:
			status_server_address = config.server_status_listen_address
		else:
			status_server_address = "localhost"
		
		status_server_port = None if config.server_status_port == 80 else config.server_status_port
	else:
		status_server_address = None
		status_server_port = None
	
	if config.server_address_for_client is not None:
		default_server_address = str(config.server_address_for_client)
	elif config.server_listen_address not in {"", "0.0.0.0"}:
		default_server_address = str(config.server_listen_address)
	else:
		default_server_address = "localhost"
	
	default_server_port = None if config.server_port == structs.DEFAULT_SERVER_PORT else config.server_port
	
	if config.server_gatekeeper_auth_server_address is not None:
		auth_server_address = config.server_gatekeeper_auth_server_address
	else:
		auth_server_address = default_server_address
	
	return status_server_address, status_server_port, default_server_address, default_server_port, auth_server_address


def _get_dh_x(keys: configuration.DHKeys) -> int:
	return pow(keys.g, keys.a, keys.n)


def generate_server_ini_keys(server_type: str, default_g: int, keys: typing.Optional[configuration.DHKeys]) -> typing.Iterable[str]:
	if keys is None:
		return
	
	if keys.g != default_g:
		yield f"{server_type}.G {keys.g}"
	
	n_data = keys.n.to_bytes(64, "big")
	n_data_base64 = base64.b64encode(n_data).decode("ascii")
	yield f'{server_type}.N "{n_data_base64}"'
	
	x_data = _get_dh_x(keys).to_bytes(64, "big")
	x_data_base64 = base64.b64encode(x_data).decode("ascii")
	yield f'{server_type}.X "{x_data_base64}"'


def generate_server_ini(config: configuration.Configuration) -> typing.Iterable[str]:
	status_server_address, status_server_port, default_server_address, default_server_port, auth_server_address = _get_external_server_addresses(config)
	
	yield "# Auto-generated by NAGUS from the server-side configuration."
	yield "# You may need to adjust the display name and server addresses."
	yield ""
	
	default_server_address_with_port = default_server_address
	if default_server_port is not None:
		default_server_address_with_port += f":{default_server_port}"
	
	yield f'Server.DispName "{default_server_address_with_port}"'
	
	if status_server_address is not None:
		status_server_address_with_port = status_server_address
		if status_server_port is not None:
			status_server_address_with_port += f":{status_server_port}"
		yield f'Server.Status "http://{status_server_address_with_port}/welcome"'
	
	yield ""
	
	if default_server_port is not None:
		yield f'Server.Port {default_server_port}'
	yield f'Server.Gate.Host "{default_server_address}"'
	yield f'Server.Auth.Host "{auth_server_address}"'
	
	if config.server_encryption != configuration.Encryption.none:
		yield ""
		yield from generate_server_ini_keys("Server.Gate", structs.DEFAULT_GATEKEEPER_DH_G, config.server_gatekeeper_keys)
		yield from generate_server_ini_keys("Server.Auth", structs.DEFAULT_AUTH_DH_G, config.server_auth_keys)
		yield from generate_server_ini_keys("Server.Game", structs.DEFAULT_GAME_DH_G, config.server_game_keys)


CWE_PATCH_HEADER = """\
Server configuration patch for traditional CWE/OpenUru clients

Auto-generated by NAGUS from the server-side configuration.
You may need to adjust the display name and server addresses.

/*==LICENSE==*

CyanWorlds.com Engine - MMOG client, server and tools
Copyright (C) 2011 Cyan Worlds, Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7

If you modify this Program, or any covered work, by linking or
combining it with any of RAD Game Tools Bink SDK, Autodesk 3ds Max SDK,
NVIDIA PhysX SDK, Microsoft DirectX SDK, OpenSSL library, Independent
JPEG Group JPEG library, Microsoft Windows Media SDK, or Apple QuickTime SDK
(or a modified version of those libraries),
containing parts covered by the terms of the Bink SDK EULA, 3ds Max EULA,
PhysX SDK EULA, DirectX SDK EULA, OpenSSL and SSLeay licenses, IJG
JPEG Library README, Windows Media SDK EULA, or QuickTime SDK EULA, the
licensors of this Program grant you additional
permission to convey the resulting work. Corresponding Source for a
non-source form of such a combination shall include the source code for
the parts of OpenSSL and IJG JPEG Library used as well as that of the covered
work.

You can contact Cyan Worlds, Inc. by email legal@cyan.com
 or by snail mail at:
      Cyan Worlds, Inc.
      14617 N Newport Hwy
      Mead, WA   99021

*==LICENSE==*/
========================================================================
--- a/Sources/Plasma/Apps/plClient/res/plClient.rc
+++ b/Sources/Plasma/Apps/plClient/res/plClient.rc
@@ -177,8 +177,8 @@
     CONTROL         "",IDC_STATIC,"Static",SS_BLACKFRAME | SS_SUNKEN,7,49,
                     288,152
     PUSHBUTTON      "Need an account?",IDC_URULOGIN_GAMETAPLINK,32,174,95,14,
-                    BS_FLAT
-    PUSHBUTTON      "Donate",IDC_URULOGIN_GAMETAPLINK2,175,174,95,14,BS_FLAT
+                    BS_FLAT | WS_DISABLED
+    PUSHBUTTON      "Donate",IDC_URULOGIN_GAMETAPLINK2,175,174,95,14,BS_FLAT | WS_DISABLED
 END
 
 IDD_URULOGIN_EULA DIALOGEX 0, 0, 300, 318
"""

CWE_PATCH_CLIENT_STATUS_ADDRESS = """\
--- a/Sources/Plasma/Apps/plClient/winmain.cpp
+++ b/Sources/Plasma/Apps/plClient/winmain.cpp
@@ -89,11 +89,7 @@
 #define UPDATE_STATUSMSG_SECONDS 30
 #define WM_USER_SETSTATUSMSG WM_USER+1
 
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\t#define STATUS_PATH L"www2.cyanworlds.com"
-#else
-\t#define STATUS_PATH L"account.mystonline.com"
-#endif
+#define STATUS_PATH L"@status_server_address@"
 
 
 //
"""

CWE_PATCH_CLIENT_STATUS_PORT = """\
@@ -1336,7 +1332,7 @@
 \t\t\t);
 \t\t\tif(hSession)
 \t\t\t{
-\t\t\t\tHINTERNET hConnect = WinHttpConnect( hSession, STATUS_PATH, INTERNET_DEFAULT_HTTP_PORT, 0);
+\t\t\t\tHINTERNET hConnect = WinHttpConnect( hSession, STATUS_PATH, @status_server_port@, 0);
 \t\t\t\tif(hConnect)
 \t\t\t\t{
 \t\t\t\t\tHINTERNET hRequest = WinHttpOpenRequest( 
"""

CWE_PATCH_LAUNCHER_STATUS_ADDRESS = """\
--- a/Sources/Plasma/Apps/plUruLauncher/Main.cpp
+++ b/Sources/Plasma/Apps/plUruLauncher/Main.cpp
@@ -55,11 +55,7 @@
 #define WHITESPACE     L" \\"\\t\\r\\n\\x1A"
 #define UPDATE_STATUSMSG_SECONDS 30\t\t// Must be an int
 
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\t#define STATUS_PATH L"www2.cyanworlds.com"
-#else
-\t#define STATUS_PATH L"account.mystonline.com"
-#endif
+#define STATUS_PATH L"@status_server_address@"
 
 
 #if BUILD_TYPE == BUILD_TYPE_BETA
"""

CWE_PATCH_LAUNCHER_STATUS_PORT = """\
@@ -727,7 +723,7 @@
 \t\t\t\thConnect = WinHttpConnect( 
 \t\t\t\t\thSession, 
 \t\t\t\t\tSTATUS_PATH, 
-\t\t\t\t\tINTERNET_DEFAULT_HTTP_PORT,
+\t\t\t\t\t@status_server_port@,
 \t\t\t\t\t0
 \t\t\t\t);
 \t\t\t\tif(hConnect)
"""

CWE_PATCH_SERVER_ADDRESSES = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/Private/pnNbSrvs.cpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/Private/pnNbSrvs.cpp
@@ -63,21 +63,7 @@
 // Auth
 //============================================================================
 static const wchar * s_authAddrs[] = {
-
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\tL"account.mystonline.com" // was L"184.73.198.22"  //L"auth.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_QA
-\tL"marrim"
-#elif BUILD_TYPE == BUILD_TYPE_TEST
-\tL"test-auth.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_BETA
-\tL"beta-auth.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_LIVE
-\tL"account.mystonline.com" // was L"184.73.198.22"  //L"auth.urulive.com"
-#else
-# error "Unknown build type"
-#endif
-
+\tL"@auth_server_address@"
 };
 static wchar s_authAddrCmdLine[64];
 static const wchar * s_authAddrsOverride[] = {
@@ -89,21 +75,7 @@
 // File
 //============================================================================
 static const wchar * s_fileAddrs[] = {
-
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\tL"67.202.54.141" //unused
-#elif BUILD_TYPE == BUILD_TYPE_QA
-\tL"marrim"
-#elif BUILD_TYPE == BUILD_TYPE_TEST
-\tL"test-file.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_BETA
-\tL"beta-file.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_LIVE
-\tL"67.202.54.141" //unused
-#else
-# error "Unknown build type"
-#endif
-
+\tL"@default_server_address@"
 };
 static wchar s_fileAddrCmdLine[64];
 static const wchar * s_fileAddrsOverride[] = {
@@ -115,21 +87,7 @@
 // Csr
 //============================================================================
 static const wchar * s_csrAddrs[] = {
-
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\tL"localhost"
-#elif BUILD_TYPE == BUILD_TYPE_QA
-\tL"localhost"
-#elif BUILD_TYPE == BUILD_TYPE_TEST
-\tL"localhost"
-#elif BUILD_TYPE == BUILD_TYPE_BETA
-\tL"beta-csr.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_LIVE
-\tL"localhost"
-#else
-# error "Unknown build type"
-#endif
-
+\tL"@default_server_address@"
 };
 static wchar s_csrAddrCmdLine[64];
 static const wchar * s_csrAddrsOverride[] = {
@@ -141,21 +99,7 @@
 // GateKeeper
 //============================================================================
 static const wchar * s_gateKeeperAddrs[] = {
-
-#if BUILD_TYPE == BUILD_TYPE_DEV
-\tL"account.mystonline.com" //was L"184.73.198.22"
-#elif BUILD_TYPE == BUILD_TYPE_QA
-\tL"localhost"
-#elif BUILD_TYPE == BUILD_TYPE_TEST
-\tL"localhost"
-#elif BUILD_TYPE == BUILD_TYPE_BETA
-\tL"beta-csr.urulive.com"
-#elif BUILD_TYPE == BUILD_TYPE_LIVE
-\tL"account.mystonline.com" //was L"184.73.198.22"
-#else
-# error "Unknown build type"
-#endif
-
+\tL"@default_server_address@"
 };
 static wchar s_gateKeeperAddrCmdLine[64];
 static const wchar * s_gateKeeperAddrsOverride[] = {
"""

CWE_PATCH_AUTH_KEYS_HEADER_WITH_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbAuthKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbAuthKey.hpp
@@ -45,29 +45,15 @@
 *
 ***/
 
-static const unsigned kDhGValue = 41;
+static const unsigned kDhGValue = @auth_key_g@;
"""

CWE_PATCH_AUTH_KEYS_HEADER_WITHOUT_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbAuthKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbAuthKey.hpp
@@ -48,26 +48,12 @@
 static const unsigned kDhGValue = 41;
"""

CWE_PATCH_AUTH_KEYS = """\
 
 static const byte kDhNData[] = {
-\t0x2d, 0x17, 0x19, 0x42, 0xeb, 0x71, 0x8f, 0x91, 
-\t0x29, 0x7c, 0x61, 0x88, 0x43, 0x75, 0xe5, 0xee, 
-\t0x72, 0xfe, 0x45, 0x1b, 0x43, 0xc3, 0x8e, 0xb9, 
-\t0x47, 0x5e, 0x03, 0xc8, 0x0c, 0x78, 0xb7, 0xe4, 
-\t0x4d, 0x31, 0x5b, 0xcb, 0x66, 0xc2, 0x54, 0x1a, 
-\t0x0a, 0x61, 0x11, 0x57, 0x38, 0x66, 0x9b, 0x34, 
-\t0x6b, 0xab, 0x6d, 0x12, 0x12, 0x38, 0x87, 0xc5, 
-\t0x3f, 0x20, 0xbe, 0x97, 0xa3, 0xa6, 0x56, 0x8f
+\t@auth_key_n@
 };
 COMPILER_ASSERT(sizeof(kDhNData) == kNetDiffieHellmanKeyBits / 8);
 
 static const byte kDhXData[] = {
-\t0x21, 0xcf, 0x1d, 0xc6, 0x08, 0xc0, 0x23, 0xad, 
-\t0x53, 0x36, 0xce, 0x61, 0x25, 0xdd, 0xb9, 0x55, 
-\t0x05, 0xc1, 0xbb, 0x8f, 0xf4, 0x0d, 0x59, 0xf9, 
-\t0x20, 0x27, 0x9a, 0xee, 0xfb, 0x23, 0x5b, 0xeb, 
-\t0xe5, 0xec, 0x01, 0x55, 0x2e, 0xd5, 0x64, 0xef, 
-\t0xea, 0x43, 0xb1, 0x9e, 0xb9, 0x8c, 0x75, 0x3f, 
-\t0xda, 0xb2, 0xbb, 0xb3, 0x6a, 0x3d, 0xcd, 0xbc, 
-\t0xfa, 0x6f, 0x03, 0xf3, 0x55, 0xd8, 0xe9, 0x1b
+\t@auth_key_x@
 };
 COMPILER_ASSERT(sizeof(kDhXData) == kNetDiffieHellmanKeyBits / 8);
 
"""

CWE_PATCH_SERVER_PORT = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbConst.h
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbConst.h
@@ -61,7 +61,7 @@
 // Network constants
 //============================================================================
 const unsigned kNetLegacyClientPort             = 80;
-const unsigned kNetDefaultClientPort            = 14617;
+const unsigned kNetDefaultClientPort            = @server_port@;
 const unsigned kNetDefaultServerPort            = 14618;
 const unsigned kNetDefaultSimpleNetPort\t\t\t= 14620;
 const unsigned kMaxTcpPacketSize\t\t\t\t= 1460;
"""

CWE_PATCH_GAME_KEYS_HEADER_WITH_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbGameKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbGameKey.hpp
@@ -45,29 +45,15 @@
 *
 ***/
 
-static const unsigned kDhGValue = 73;
+static const unsigned kDhGValue = @game_key_g@;
"""

CWE_PATCH_GAME_KEYS_HEADER_WITHOUT_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbGameKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbGameKey.hpp
@@ -48,26 +48,12 @@
 static const unsigned kDhGValue = 73;
"""

CWE_PATCH_GAME_KEYS = """\
 
 static const byte kDhNData[] = {
-\t0x38, 0xa4, 0xf7, 0x69, 0x43, 0xd7, 0xa6, 0xc7, 
-\t0x27, 0x72, 0x3b, 0x12, 0x6a, 0x76, 0x09, 0x5d, 
-\t0xaa, 0x9a, 0x38, 0x44, 0xde, 0x84, 0x22, 0xc4, 
-\t0xde, 0x3f, 0xfd, 0x50, 0x26, 0xea, 0xbb, 0x20, 
-\t0xd6, 0xad, 0x2e, 0xcd, 0xfe, 0xf2, 0x70, 0x1b, 
-\t0x19, 0xd1, 0x82, 0x15, 0xd7, 0xcb, 0x33, 0x60, 
-\t0x20, 0xbc, 0x43, 0xc9, 0x55, 0x0b, 0xc9, 0x20, 
-\t0xd9, 0x24, 0xd2, 0x49, 0xd0, 0x28, 0x4b, 0x90
+\t@game_key_n@
 };
 COMPILER_ASSERT(sizeof(kDhNData) == kNetDiffieHellmanKeyBits / 8);
 
 static const byte kDhXData[] = {
-\t0xf9, 0xb2, 0x93, 0xbd, 0x02, 0xbd, 0x72, 0x48, 
-\t0xa9, 0x21, 0xbd, 0x09, 0x3e, 0x44, 0x65, 0x3e, 
-\t0xc2, 0xfd, 0x5a, 0xf0, 0x99, 0x3b, 0x3f, 0x5c, 
-\t0x47, 0x76, 0x5c, 0x1f, 0x84, 0xd8, 0x01, 0x68, 
-\t0xdc, 0x5f, 0xb6, 0xba, 0xc8, 0xfd, 0x79, 0x98, 
-\t0x62, 0x93, 0x36, 0x7f, 0x14, 0xcf, 0x33, 0x67, 
-\t0x84, 0x04, 0xcf, 0xa3, 0x7a, 0x65, 0xe9, 0x68, 
-\t0x4f, 0x58, 0x58, 0xb3, 0x8f, 0x3d, 0xdb, 0x3d
+\t@game_key_x@
 };
 COMPILER_ASSERT(sizeof(kDhXData) == kNetDiffieHellmanKeyBits / 8);
 
"""

CWE_PATCH_GATEKEEPER_KEYS_WITH_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbGateKeeperKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbGateKeeperKey.hpp
@@ -45,29 +45,15 @@
 *   
 ***/
 
-static const unsigned kDhGValue = 4;
+static const unsigned kDhGValue = @gatekeeper_key_g@;
"""

CWE_PATCH_GATEKEEPER_KEYS_WITHOUT_G = """\
--- a/Sources/Plasma/NucleusLib/pnNetBase/pnNbGateKeeperKey.hpp
+++ b/Sources/Plasma/NucleusLib/pnNetBase/pnNbGateKeeperKey.hpp
@@ -48,26 +48,12 @@
 static const unsigned kDhGValue = 4;
"""

CWE_PATCH_GATEKEEPER_KEYS = """\
 
 static const byte kDhNData[] = {
-    0x8d, 0xfa, 0x35, 0xe6, 0xf8, 0x7a, 0x50, 0x50, 
-    0xab, 0x25, 0x4b, 0x81, 0xd1, 0xd7, 0x7a, 0x23, 
-    0xa3, 0x9a, 0x21, 0x0f, 0x34, 0xab, 0x66, 0x2e, 
-    0x16, 0x98, 0x55, 0xb6, 0xfc, 0x49, 0xd5, 0x50, 
-    0xdc, 0xb8, 0x4c, 0x4d, 0xc7, 0xdb, 0xf1, 0x1c, 
-    0x15, 0x4c, 0x55, 0xf5, 0x92, 0x0d, 0x6a, 0xec, 
-    0x60, 0xbc, 0x55, 0xfa, 0x29, 0x2f, 0x6f, 0xc3, 
-    0xd7, 0x21, 0x80, 0xa3, 0x6b, 0x44, 0x23, 0xb5, 
+    @gatekeeper_key_n@
 };
 COMPILER_ASSERT(sizeof(kDhNData) == kNetDiffieHellmanKeyBits / 8);
 
 static const byte kDhXData[] = {
-    0xb3, 0x88, 0xff, 0x0b, 0x90, 0x70, 0x2b, 0x2e, 
-    0x07, 0xbc, 0x62, 0x98, 0x83, 0x9d, 0x0f, 0x05, 
-    0x39, 0xfa, 0x35, 0x39, 0xa9, 0xf3, 0xb3, 0xfc, 
-    0xcd, 0x5e, 0xa9, 0xa6, 0x61, 0x0f, 0x9b, 0x38, 
-    0x0f, 0x9c, 0xbe, 0xa0, 0xbe, 0x6f, 0x7f, 0xe4, 
-    0x7c, 0xcb, 0xc4, 0x09, 0x6c, 0x8d, 0xce, 0x47, 
-    0x68, 0x82, 0x32, 0xc5, 0x89, 0x94, 0xf9, 0xca, 
-    0x69, 0x69, 0xd0, 0x60, 0x19, 0xb7, 0xf3, 0x1a, 
+    @gatekeeper_key_x@
 };
 COMPILER_ASSERT(sizeof(kDhXData) == kNetDiffieHellmanKeyBits / 8);
 
"""

CWE_PATCH_NO_ENCRYPTION = """\
--- a/Sources/Plasma/NucleusLib/pnNetCli/pnNcCli.cpp
+++ b/Sources/Plasma/NucleusLib/pnNetCli/pnNcCli.cpp
@@ -56,7 +56,7 @@
 # define NCCLI_LOG\tNULL_STMT
 #endif
 
-//#define NO_ENCRYPTION
+#define NO_ENCRYPTION
 
 namespace pnNetCli {
 
"""

CWE_PATCH_STATUS_PATH = """\
--- a/Sources/Plasma/NucleusLib/pnProduct/Private/pnPrBuildType.cpp
+++ b/Sources/Plasma/NucleusLib/pnProduct/Private/pnPrBuildType.cpp
@@ -81,19 +81,5 @@
 
 //============================================================================
 const wchar *BuildTypeServerStatusPath () {
-\t\t
-\t#if BUILD_TYPE == BUILD_TYPE_DEV
-\t\treturn nil;
-\t#elif BUILD_TYPE == BUILD_TYPE_QA
-\t\treturn nil;
-\t#elif BUILD_TYPE == BUILD_TYPE_TEST
-\t\treturn nil;
-\t#elif BUILD_TYPE == BUILD_TYPE_BETA
-\t\treturn L"/serverstatus/moulbeta.php";
-\t#elif BUILD_TYPE == BUILD_TYPE_LIVE
-\t\treturn L"/serverstatus/moullive.php";
-\t#else
-\t# error "Unknown build type"
-\t#endif
-
+\treturn L"/welcome";
 }
"""


def _dh_key_to_cwe(key: int) -> str:
	return ", ".join(f"0x{byte:>02x}" for byte in key.to_bytes(64, "little"))


def generate_cwe_server_config_patch(config: configuration.Configuration) -> str:
	status_server_address, status_server_port, default_server_address, default_server_port, auth_server_address = _get_external_server_addresses(config)
	
	# This wacky order is to keep the resulting patch file in alphabetical order by file path.
	
	patch_text = CWE_PATCH_HEADER
	
	if status_server_address is not None:
		patch_text += CWE_PATCH_CLIENT_STATUS_ADDRESS.replace("@status_server_address@", status_server_address)
		if status_server_port is not None:
			patch_text += CWE_PATCH_CLIENT_STATUS_PORT.replace("@status_server_port@", str(status_server_port))
		
		patch_text += CWE_PATCH_LAUNCHER_STATUS_ADDRESS.replace("@status_server_address@", status_server_address)
		if status_server_port is not None:
			patch_text += CWE_PATCH_LAUNCHER_STATUS_PORT.replace("@status_server_port@", str(status_server_port))
	
	patch_text += CWE_PATCH_SERVER_ADDRESSES.replace("@auth_server_address@", auth_server_address).replace("@default_server_address@", default_server_address)
	
	if config.server_auth_keys is not None:
		if config.server_auth_keys.g == structs.DEFAULT_AUTH_DH_G:
			patch_text += CWE_PATCH_AUTH_KEYS_HEADER_WITHOUT_G
		else:
			patch_text += CWE_PATCH_AUTH_KEYS_HEADER_WITH_G.replace("@auth_key_g@", str(config.server_auth_keys.g))
		
		patch_text += CWE_PATCH_AUTH_KEYS.replace("@auth_key_n@", _dh_key_to_cwe(config.server_auth_keys.n)).replace("@auth_key_x@", _dh_key_to_cwe(_get_dh_x(config.server_auth_keys)))
	
	if default_server_port is not None:
		patch_text += CWE_PATCH_SERVER_PORT.replace("@server_port@", str(default_server_port))
	
	if config.server_game_keys is not None:
		if config.server_game_keys.g == structs.DEFAULT_GAME_DH_G:
			patch_text += CWE_PATCH_GAME_KEYS_HEADER_WITHOUT_G
		else:
			patch_text += CWE_PATCH_GAME_KEYS_HEADER_WITH_G.replace("@game_key_g@", str(config.server_game_keys.g))
		
		patch_text += CWE_PATCH_GAME_KEYS.replace("@game_key_n@", _dh_key_to_cwe(config.server_game_keys.n)).replace("@game_key_x@", _dh_key_to_cwe(_get_dh_x(config.server_game_keys)))
	
	if config.server_gatekeeper_keys is not None:
		if config.server_gatekeeper_keys.g == structs.DEFAULT_GATEKEEPER_DH_G:
			patch_text += CWE_PATCH_GATEKEEPER_KEYS_WITHOUT_G
		else:
			patch_text += CWE_PATCH_GATEKEEPER_KEYS_WITH_G.replace("@gatekeeper_key_g@", str(config.server_gatekeeper_keys.g))
		
		patch_text += CWE_PATCH_GATEKEEPER_KEYS.replace("@gatekeeper_key_n@", _dh_key_to_cwe(config.server_gatekeeper_keys.n)).replace("@gatekeeper_key_x@", _dh_key_to_cwe(_get_dh_x(config.server_gatekeeper_keys)))
	
	if config.server_encryption == configuration.Encryption.none:
		patch_text += CWE_PATCH_NO_ENCRYPTION
	
	if status_server_address is not None:
		patch_text += CWE_PATCH_STATUS_PATH
	
	return patch_text
